class RUNTIME;

@import_plsql(true)
@this(create_on_start:=true)
@name('STDLIB')
@target(plsql:=true)
library STDLIB is
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   Ответственный за эту операцию - Шептовицкий A.
   Любое изменение операции только через ответственного.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
public User_Id ref [USER];



	
--
pragma include ([INTERFACE].[COMPILE_LIB]);
procedure check_api is
begin
	&check_api
end;
--

Self_User varchar2(30) := rtl.USR;
tune_name_like_middlename string(32000);

--------------------------------------------------------------
-- Возвращает внутреннее Id пользователя системы
public function UserId
/*возвращение внутреннего Id пользователя системы*/

/*внутренний Id пользователя системы*/
return ref [USER] Deterministic is 
	USR varchar2(30);
begin
	USR := rtl.USR;
	if USR<>Self_User then
		Self_User := USR;
		select u(u) in ::[USER] all where u.[USERNAME] = USR
		into User_Id;
	end if;
	return User_Id;
exception when NO_DATA_FOUND then
  User_Id := Null;
  return null;
end;
	PRAGMA RESTRICT_REFERENCES (UserId, WNDS, WNPS, TRUST);

--------------------------------------------------------------
public FUNCTION GetSystemValue
/*не типизированная/ возвращение системных установок результат строка*/
(
ValueName IN VARCHAR2 /*наименование системной установки*/
)
/*значение системной установки*/
RETURN VARCHAR2 Deterministic is 
BEGIN
    RETURN ::[SYSTEM]%value(::[SYSTEM],ValueName);
END;
	PRAGMA RESTRICT_REFERENCES (GetSystemValue, WNDS, WNPS, TRUST);
--------------------------------------------------------------
public FUNCTION GetSystemValue
/*не типизированная/ возвращение системных установок результат дата*/
(
ValueName IN VARCHAR2 /*наименование системной установки*/
)
/*значение системной установки*/
RETURN DATE Deterministic is 
BEGIN
    case ValueName of
	:'OP_DATE':
		return ::[SYSTEM].[OP_DATE];
	else
    	RETURN cast_to([DATE], ::[SYSTEM]%value(::[SYSTEM], ValueName));
    end;
END;
	PRAGMA RESTRICT_REFERENCES (GetSystemValue, WNDS, WNPS, TRUST);
--------------------------------------------------------------
public FUNCTION GetSystemValueS
/*типизированная/ возвращение системных установок результат строка*/
(
ValueName IN VARCHAR2 /*наименование системной установки*/
)
/*значение системной установки*/
RETURN VARCHAR2 Deterministic is 
BEGIN
    RETURN ::[SYSTEM]%value(::[SYSTEM],ValueName);
END;
	PRAGMA RESTRICT_REFERENCES (GetSystemValueS, WNDS, WNPS, TRUST);
--------------------------------------------------------------
public FUNCTION GetSystemValueD
/*типизированная/ возвращение системных установок результат дата*/
(
ValueName IN VARCHAR2 /*наименование системной установки*/
)
/*значение системной установки*/
RETURN DATE Deterministic is 
BEGIN
    case ValueName of
	:'OP_DATE':
		return ::[SYSTEM].[OP_DATE];
	else
    	RETURN cast_to([DATE], ::[SYSTEM]%value(::[SYSTEM], ValueName));
    end;
END;
	PRAGMA RESTRICT_REFERENCES (GetSystemValueD, WNDS, WNPS, TRUST);
--------------------------------------------------------------

public FUNCTION N2Str
/*функция возвращает сумму прописью для заданной числом суммы и валюты.
Параметр Valuta:
	если 'NatCur', то считается, что это национальная валюта.
	можно передать ID валюты, указав перед значение ID '!'(воскл.знак). Напр.: '!554477'
	если NULL, то возвращается число в мужском роде с опущенными единицами измерения
Для вывода суммы прописью в произвольном формате рекомендуется использовать функцию ::[RUNTIME].[FDP].Sum2Str
*/
(
nValue IN NUMBER /*сумма*/
, Valuta IN VARCHAR2 default NULL /*короткое буквенное наименование валюты*/
, WithDec IN VARCHAR2 default '1' /*выводить десятичную часть суммы (копейки, центы и т.д.)*/
)
/*сумма прописью*/
RETURN VARCHAR2 Deterministic is 
	TYPE t_num IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
	TYPE t_s30 IS rtl.STRING40_TABLE; --TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
	TYPE t_s16 IS rtl.STRING40_TABLE; --TABLE OF VARCHAR2(16) INDEX BY BINARY_INTEGER;
	aDec1 t_num;
	aDec2 t_s30;
	aDec3 t_num;
	aEd t_s16;
	aD1 t_num;
	aD2 t_s16;
	aDd t_s16;
	aSt t_s16;
	aExt1 t_s16;
	aExt2 t_s16;
	aExt3 t_s16;
	aExtB1 t_s16;
	aExtB2 t_s16;
	nMode NUMBER;
	nNum NUMBER;
	cDec VARCHAR2(16);
	cDecOne VARCHAR2(16);
	cDecTwo VARCHAR2(16);
	cDecFive VARCHAR2(16);
	lNull BOOLEAN;
	lMinus BOOLEAN;
	lDec BOOLEAN;
	lBig BOOLEAN;
	a NUMBER;
	b NUMBER;
	c NUMBER;
	cValue VARCHAR2(100);
	cString VARCHAR2(2000);
	cIntExt VARCHAR2(30);
	cDecExt VARCHAR2(30);
	cOne VARCHAR2(30);
	cTwo VARCHAR2(30);
	cFive VARCHAR2(30);
	cGenus VARCHAR2(1);
	cDecTxt VARCHAR2(30);
	CurID ref [FT_MONEY]; -- ID валюты
begin
	aDec1(1) := 1000000000000;
	aDec1(2) := 1000000000;
	aDec1(3) := 1000000;
	aDec1(4) := 1000;
	aDec1(5) := 1;
	aDec2(1) := 'триллион';
	aDec2(2) := 'миллиард';
	aDec2(3) := 'миллион';
	aDec2(4) := 'тысяч';
	aDec2(5) := '';
	aDec3(1) := 1;
	aDec3(2) := 1;
	aDec3(3) := 1;
	aDec3(4) := 2;
	aDec3(5) := 0;
	aEd(1) := 'один ';
	aEd(2) := 'два ';
	aEd(3) := 'три ';
	aEd(4) := 'четыре ';
	aEd(5) := 'пять ';
	aEd(6) := 'шесть ';
	aEd(7) := 'семь ';
	aEd(8) := 'восемь ';
	aEd(9) := 'девять ';
	aD1(1) := 11;
	aD1(2) := 12;
	aD1(3) := 13;
	aD1(4) := 14;
	aD1(5) := 15;
	aD1(6) := 16;
	aD1(7) := 17;
	aD1(8) := 18;
	aD1(9) := 19;
	aD2(1) := 'одиннадцать ';
	aD2(2) := 'двенадцать ';
	aD2(3) := 'тринадцать ';
	aD2(4) := 'четырнадцать ';
	aD2(5) := 'пятнадцать ';
	aD2(6) := 'шестнадцать ';
	aD2(7) := 'семнадцать ';
	aD2(8) := 'восемнадцать ';
	aD2(9) := 'девятнадцать ';
	aDd(1) := 'десять ';
	aDd(2) := 'двадцать ';
	aDd(3) := 'тридцать ';
	aDd(4) := 'сорок ';
	aDd(5) := 'пятьдесят ';
	aDd(6) := 'шестьдесят ';
	aDd(7) := 'семьдесят ';
	aDd(8) := 'восемьдесят ';
	aDd(9) := 'девяносто ';
	aSt(1) := 'сто ';
	aSt(2) := 'двести ';
	aSt(3) := 'триста ';
	aSt(4) := 'четыреста ';
	aSt(5) := 'пятьсот ';
	aSt(6) := 'шестьсот ';
	aSt(7) := 'семьсот ';
	aSt(8) := 'восемьсот ';
	aSt(9) := 'девятьсот ';
	aExt1(1) := 'один ';
	aExt1(2) := 'два ';
	aExt2(1) := 'одна ';
	aExt2(2) := 'две ';
	aExt3(1) := 'одно ';
	aExt3(2) := 'два ';
	aExtB1(1) := ' ';
	aExtB1(2) := 'а ';
	aExtB1(3) := 'ов ';
	aExtB2(1) := 'а ';
	aExtB2(2) := 'и ';
	aExtB2(3) := ' ';
	lNull := TRUE;
	nNum := Trunc(Round(nValue,2));
	cValue := TO_CHAR(nValue, '999999999999999.99');
	if InStr(cValue, '.') > 0 then
		cDec := SubStr(cValue, InStr(cValue, '.') + 1);
	else
		cDec := '00';
	end if;
	cString := ' ';
	if nNum < 0 then
		nNum := - nNum;
		lMinus := TRUE;
	end if;
	if upper(Valuta) = upper('NatCur') then
		CurID := [SYSTEM]::[SYS_MAIN_VAL];
	elsif substr(Valuta, 1, 1) = '!' then
		CurID%id := substr(Valuta, 2);
	else
		CurID := ::[FT_MONEY].[LIB].get_money(Valuta); -- если ф-я не нашла, то вернет null
	end if;
	if Not Valuta is NULL then
		declare
			v_curr_print [CURR_PRINT];
		begin
			::[FT_MONEY].[LIB].GetCurAttr(CurId,v_curr_print/*out*/);
			cGenus := nvl(substr(v_curr_print.[CUR_SEX],1,1),'М');
			cOne := v_curr_print.[CUR_P_2UNIT];
			cTwo := v_curr_print.[CUR_P_3UNIT];
			cFive := v_curr_print.[CUR_P_5UNIT];
			cDecTxt := v_curr_print.[NO_ENTIER];
			cDecOne := v_curr_print.[NAME_ONE_DEC];
			cDecTwo := v_curr_print.[NAME_TWO_DEC];
			cDecFive := v_curr_print.[NAME_FIVE_DEC];
		end;
	end if;
	for i in aDec1.first .. aDec1.Last loop
		nMode := aDec3(i);
		a := Trunc(nNum/aDec1(i));
		if a > 0 then
			lNull := FALSE;
			lDec := TRUE;
			-- для чисел >= 1000
			if nMode > 0 then
				lBig := TRUE;
			else
				lBig := FALSE;
			end if;
			--Получаем значение сотни
			b := Trunc(a/100);
			if b > 0 then
				cString := cString || aSt(b);
			end if;
			--Получаем значение десятков и единиц
			c := a - b * 100;
			if c > 0 then
				if c > 10 and c < 20 then
					for j IN aD1.First .. aD1.Last loop
						if c = aD1(j) then
							cString := cString || aD2(j);
						end if;
					end loop;
				elsif c >= 20 or c = 10 then
					cString := cString || aDd(Trunc(c/10));
					c := c - Trunc(c/10) * 10;
					if c >= 1 then
						if nMode != 0 and (c = 1 or c = 2) then
							if nMode = 1 then
								cString := cString || aExt1(c);
							else
								cString := cString || aExt2(c);
							end if;
						else
							if cGenus = 'Ж' and (c = 1 or c = 2) then
								cString := cString || aExt2(c);
							elsif cGenus = 'С' and (c = 1 or c = 2) then
								cString := cString || aExt3(c);
							else
								cString := cString || aEd(c);
							end if;
						end if;
					end if;
				else
					if nMode != 0 and (c = 1 or c = 2) then
						if nMode = 1 then
							cString := cString || aExt1(c);
						else
							cString := cString || aExt2(c);
						end if;
					else
						--cString := cString || aEd(c);
						if cGenus = 'Ж' and (c = 1 or c = 2) then
							cString := cString || aExt2(c);
						elsif cGenus = 'С' and (c = 1 or c = 2) then
							cString := cString || aExt3(c);
						else
							cString := cString || aEd(c);
						end if;
					end if;
				end if;
			end if;
		else
			lDec := FALSE;
		end if;
		nNum := nNum - a * aDec1(i);
		if nMode != 0 and lDec then
			if nMode = 1 then
				if c = 1 then
					cString := cString || aDec2(i) || aExtB1(1);
				elsif c > 4 or c = 0 then
					cString := cString || aDec2(i) || aExtB1(3);
				else
					cString := cString || aDec2(i) || aExtB1(2);
				end if;
			else
				if c = 1 then
					cString := cString || aDec2(i) || aExtB2(1);
				elsif c > 4 or c = 0 then
					cString := cString || aDec2(i) || aExtB2(3);
				else
					cString := cString || aDec2(i) || aExtB2(2);
				end if;
			end if;
		elsif nMode = 0 then
			if Valuta is Null then
				cIntExt := '';
				cDecExt := '';
			else
				if lBig then
					cIntExt := cFive;
				else
					if c = 1 then
						cIntExt := cOne;
					elsif c > 1 and c < 5 then
						cIntExt := cTwo;
					else
						cIntExt := cFive;
					end if;
				end if;
				cDecExt := cDecTxt;
				if substr(cDec, 1, 1) != '1' and substr(cDec, 2, 1) = '1' then
					cDecExt := nvl(cDecOne, cDecTxt);
				elsif substr(cDec, 1, 1) != '1' and substr(cDec, 2, 1) in ('2','3','4') then
					cDecExt := nvl(cDecTwo, cDecTxt);
				elsif cDec is not NULL then
					cDecExt := nvl(cDecFive, cDecTxt);
				end if;
			end if;
			if WithDec = '0' then
				cDec := '';
				cDecExt := '';
			else
				cDec := ' ' || cDec;
				cDecExt := ' ' || cDecExt;
			end if;
			cString := cString || cIntExt || cDec || cDecExt;
		end if;
	end loop;
	if lNull then
		cString := 'ноль ' || LTrim(cString);
	end if;
	if lMinus then
		cString := 'минус ' || LTrim(cString);
	end if;
	return UPPER(substr(LTrim(cString), 1, 1)) || Substr(LTrim(cString), 2);
end;
	PRAGMA RESTRICT_REFERENCES (N2Str, WNDS, WNPS, TRUST);

public PROCEDURE N2Str
/*Процедура возвращает через out-параметр value сумму прописью для заданной числом суммы и валюты
Для вывода суммы прописью в произвольном формате рекомендуется использовать функцию ::[RUNTIME].[FDP].Sum2Str
*/
(
nValue IN NUMBER /*сумма*/
, value OUT VARCHAR2 /*выходной параметр суммы прописью*/
, Valuta IN VARCHAR2 default NULL /*короткое буквенное наименование валюты*/
) is 
begin
	value := N2Str(nValue, Valuta);
end;

---------------------------------------------
public function FIO
/*возвращает форматированое ФИО
Если ISFIO = '1', то порядок слов в NAME принимается в формате ФИО (по умолчанию), т.е. без поиска отчества
*/
(
NAME in varchar2 /*ФИО прописью*/
, FORMAT in varchar2 default 'Ф И. О.' /*формат вывода*/
, ISFIO in varchar2 default '0' /*флаг, что ФИО передан в порядке Ф И О*/
)
/*строка с фио по указанному формату*/
return varchar2 Deterministic is 
	name_ varchar2(300);
	format_ varchar2(100);
	ret varchar2(300);
	l varchar2(1);
	p_dot pls_integer;
	p_space pls_integer;
	f varchar2(300);
	i varchar2(300);
	o varchar2(300);
	s1 varchar2(300);
	s2 varchar2(300);
	s3 varchar2(300);
begin
	name_ := substr(ltrim(rtrim(NAME)), 1, 300);
	p_dot := instr(name_, '.'); -- первая точка
	if p_dot > 0 then   -- уже и так с точками, посмотрим, где эти точки
		if p_dot > 2 then -- в конце
			p_space := instr(name_, ' '); -- первый пробел
			if p_space < p_dot and p_space > 0 then  -- пробел сначала
				f := substr(name_, 1, p_space-1); -- до пробела - фамили
				name_ := ltrim(rtrim(substr(name_, p_space+1))); --
				p_space := instr(name_, ' ');
				p_dot := instr(name_, '.');
				if p_space < p_dot and p_space > 0 then
					i := substr(name_, 1, p_space-1);
					o := substr(name_, p_space+1);
				else
					i := substr(name_, 1, p_dot);
					o := substr(name_, p_dot+1);
				end if;
			else -- нет пробела - не понятно, что там навводили
				f := name_;
			end if;
		else -- в начале
			i := substr(name_, 1, 2);
			name_ := ltrim(rtrim(substr(name_, p_dot+1)));
			p_dot := instr(name_, '.');
			if p_dot <= 3  then
				o := substr(ltrim(rtrim(substr(name_, 1, p_dot))), 1, 2);
				f := substr(name_, p_dot+1);
			else
				f := name_;
			end if;
		end if;
	else -- точек нет
		-- полное ФИО
		p_space := instr(name_, ' '); -- первый пробел
		if p_space > 0 then
			f := substr(name_, 1, p_space-1);
			name_ := ltrim(rtrim(substr(name_, p_space)));
			p_space := instr(name_, ' ', 2);
			if p_space > 0 then -- есть второй пробел
				i := substr(name_, 1, p_space-1);
				o := substr(name_, p_space);
			else -- нет второго пробела
				i := name_;
			end if;
		else
			f := name_;
		end if;
	end if;
	s1 := trim(f);
	s2 := trim(i);
	s3 := trim(o);
	f := s1;
	i := s2;
	o := s3;
	if nvl(ISFIO, '0') = '1' then
		null;
	elsif
		(
			(upper(substr(s2, -3, 3)) = 'ВНА' and upper(substr(s3, -3, 3)) not in ('ВНА', 'ЧНА'))
			or upper(substr(s2, -3, 3)) = 'ЧНА'
			or upper(substr(s2, -2, 2)) = 'ИЧ'
		)
		and instr(tune_name_like_middlename, ';' || upper(s2) || ';') = 0
	then
		i := s1;
		o := s2;
		f := s3;
	elsif substr(s2, -1, 1) = '.' then
		if s3 is null then
			f := s1;
			i := s2;
		elsif substr(s3, -1, 1) = '.' then
			f := s1;
			i := s2;
			o := s3;
		else
			i := s1;
			o := s2;
			f := s3;
		end if;
	end if;
	
	format_ := UPPER(nvl(FORMAT, 'Ф'));
	if format_ = 'Ф' then
		ret := f;
	elsif format_ = 'И' then
		ret := i;
	elsif format_ = 'О' then
		ret := o;
	else
		for j in 1..length(format_) loop
			l := substr(format_, j, 1);
			if l = 'И' then
				if substr(format_, j+1, 1) = '.' then
					i := substr(i, 1, 1);
				end if;
				ret := ret||i;
			elsif l = 'О' then
				if substr(format_, j+1, 1) = '.' then
					o := substr(o, 1, 1);
				end if;
				ret := ret||o;
			elsif l = 'Ф' then
				if substr(format_, j+1, 1) = '.' then
					f := substr(f, 1, 1);
				end if;
				ret := ret||f;
			elsif l = '.' then
				if substr(ret, -1, 1) not in (' ', '.') then
					ret := ret||l;
				end if;
			elsif l = ' ' then
				if substr(ret, -1, 1) <> ' ' then
					ret := ret||l;
				end if;
			else
				return ('Недопустимый форматный символ "'||l||'"');
			end if;
		end loop;
	end if;
	return ret;
end;
	PRAGMA RESTRICT_REFERENCES (FIO, WNDS, WNPS, TRUST);

--------------------------------------------------------------
-- Блок инициализации пакета
--------------------------------------------------------------
begin
	begin
    	select u(u) in ::[USER] all where u.[USERNAME] = Self_User
    	into User_Id;
	exception
		when NO_DATA_FOUND then
			null;
	end;
	tune_name_like_middlename := ';' || upper(::[FP_TUNE].[LIB].get_str_value('NAMES_LIKE_MIDDLENAME', null, '0')) || ';';
end;
end;
