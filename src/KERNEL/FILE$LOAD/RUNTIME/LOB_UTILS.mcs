'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
const cLOBBlockSize = 31512
dim cBinBlockSize
const cEncodeFmt = "base64"
if cEncodeFmt = "base64" then
	cBinBlockSize = 23634
else
	cBinBlockSize = 15756
end if

dim l_FormCaption

function GetPercentStr(current, total)
	if total > 0 then
		GetPercentStr = "Передача данных: " & round(100 * (current / total), 0) & "%"
	else
		GetPercentStr = "Передача данных..."
	end if
end function

sub Progress(current, total)
	s = GetPercentStr(current, total)
	Runtime.Form.Caption = s
	Runtime.WS(s)
end sub
sub ProgressBefore
	l_FormCaption = Runtime.Form.Caption
	call Progress(0, 100)
end sub
sub ProgressAfter
	Runtime.Form.Caption = l_FormCaption
	Runtime.WS("")
end sub

' Функции для работы с BLOBами
' для работы необходима поддержка в серверном валидаторе (см. серверную часть) и
' наличие параметра V_BLOB_BUFF типа MEMO 32000, а на форме контрола с именем LOBBuff

' возвращает значение BLOB, переданного в серверный валидатор
function GetBLOB
	dim res, ls, total
	res = ""

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_INIT_SEND")
	total = 0 + LOBBuff.Text

	call ProgressBefore
	do
		call Runtime.ServerValidate(Nothing, "__LU_BLOB_SEND_BLOCK")
		s = DecodeTxt(LOBBuff.Text, cEncodeFmt)
		ls = len(s)
		if ls > 0 then
			res = res & s
		end if

		call Progress(len(res), total)

		if ls < cBinBlockSize then
			exit do
		end if
	loop
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_CLOSE_SEND")

	GetBLOB = res
end function
' сохраняет значение BLOB, переданного в серверный валидатор, в заданный файл
sub GetBLOBToFile(filename)
	dim fso, ts, objStream, objXML, objDocElem, ls, total

	' Пробуем создать файл
	set fso = CreateObject("Scripting.FileSystemObject")
	set ts = fso.CreateTextFile(filename, true, true)
	ts.Close
	set ts = Nothing
	set fso = Nothing

	' Создаем объекты для преобразования
	set objXML = CreateObject("MSXml2.DOMDocument")
	objXML.loadXML "<data/>"
	set objDocElem = objXML.documentElement
	objDocElem.dataType = "bin." & cEncodeFmt
	set objStream = CreateObject("ADODB.Stream")
	objStream.Type = 1
	objStream.Mode = 3
	objStream.Open

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_INIT_SEND")
	total = 0 + LOBBuff.Text

	call ProgressBefore
	do
		call Runtime.ServerValidate(Nothing, "__LU_BLOB_SEND_BLOCK")
		if LOBBuff.Text = "" then
			exit do
		end if

		objDocElem.text = LOBBuff.Text
		ls = lenb(objDocElem.nodeTypedValue)
		
		if ls > 0 then ' запись очередного блока
			objStream.Write(objDocElem.nodeTypedValue)
		end if

		call Progress(objStream.Size, total)

		if ls < cBinBlockSize then
			exit do
		end if
	loop
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_CLOSE_SEND")

	objStream.SaveToFile filename, 2
	objStream.Close
	set objDocElem = Nothing
	set objXML = Nothing
	set objStream = Nothing
end sub

' возвращает значение CLOB, переданного в серверный валидатор
function GetCLOB
	dim res, ls, total
	res = ""

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_INIT_SEND")
	total = 0 + LOBBuff.Text

	call ProgressBefore
	do
		call Runtime.ServerValidate(Nothing, "__LU_CLOB_SEND_BLOCK")
		s = LOBBuff.Text
		ls = len(s)
		if ls > 0 then
			res = res & s
		end if

		call Progress(len(res), total)

		if ls < cLOBBlockSize then
			exit do
		end if
	loop
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_CLOSE_SEND")

	GetCLOB = res
end function
' сохраняет значение СLOB, переданного в серверный валидатор, в заданный файл
sub GetCLOBToFile(filename)
	dim fso, ts, ls, total, sz, txt

	' Создаем файл
	set fso = CreateObject("Scripting.FileSystemObject")
	set ts = fso.CreateTextFile(filename, true, false)
	sz = 0

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_INIT_SEND")
	total = 0 + LOBBuff.Text

	call ProgressBefore
	do
		call Runtime.ServerValidate(Nothing, "__LU_CLOB_SEND_BLOCK")
		ls = len(LOBBuff.Text)
		if ls > 0 then ' запись в файл
			ts.Write(LOBBuff.Text)
			sz = sz + ls
		end if

		call Progress(sz, total)

		if ls < cLOBBlockSize then
			exit do
		end if
	loop
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_CLOSE_SEND")

	ts.Close
	set ts = Nothing
	set fso = Nothing
end sub

' Передает sText в BLOB на сервер
sub SetBLOB(sText)
	dim s, total
	total = len(sText)

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_INIT_RECEIVE")

	call ProgressBefore
	do
		s = left(sText, cBinBlockSize)
		ls = len(s)
		lt = len(sText)
		if ls < lt then ' откусываем кусок
			sText = right(sText, lt - ls)
		else ' влезло все
			sText = ""
		end if

		LOBBuff.Text = EncodeTxt(s, cEncodeFmt)
		call Runtime.ServerValidate(Nothing, "__LU_BLOB_RECEIVE_BLOCK")

		call Progress(total - len(sText), total)
	loop while len(sText) > 0
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_CLOSE_RECEIVE")
end sub
' Передает указанный файл в BLOB на сервер
sub SetBLOBFromFile(filename)
	dim fso, ts, objStream, objXML, objDocElem, ls, total

	' Создаем объекты для преобразования
	set objStream = CreateObject("ADODB.Stream")
	objStream.Type = 1
	objStream.Mode = 3
	objStream.Open
	objStream.LoadFromFile(filename)

	set objXML = CreateObject("MSXml2.DOMDocument")
	objXML.loadXML "<data/>"
	set objDocElem = objXML.documentElement
	objDocElem.dataType = "bin." & cEncodeFmt

	total = objStream.Size

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_INIT_RECEIVE")

	call ProgressBefore
	do
		objDocElem.nodeTypedValue = objStream.Read(cBinBlockSize)
		ls = lenb(objDocElem.nodeTypedValue)

		LOBBuff.Text = objDocElem.text
		call Runtime.ServerValidate(Nothing, "__LU_BLOB_RECEIVE_BLOCK")

		call Progress(objStream.Position, total)
	loop while not objStream.EOS
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_BLOB_CLOSE_RECEIVE")

	objStream.Close
	set objDocElem = Nothing
	set objXML = Nothing
	set objStream = Nothing
end sub

' Передает sText в CLOB на сервер
sub SetCLOB(sText)
	dim s, total
	total = len(sText)

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_INIT_RECEIVE")

	call ProgressBefore
	do
		s = left(sText, cLOBBlockSize)
		ls = len(s)
		lt = len(sText)
		if ls < lt then ' откусываем кусок
			sText = right(sText, lt - ls)
		else ' влезло все
			sText = ""
		end if

		LOBBuff.Text = s
		call Runtime.ServerValidate(Nothing, "__LU_CLOB_RECEIVE_BLOCK")

		call Progress(total - len(sText), total)
	loop while len(sText) > 0
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_CLOSE_RECEIVE")
end sub
' Передает указанный файл в BLOB на сервер
sub SetCLOBFromFile(filename)
	dim fso, f, ts, ls, total, sz

	' Создаем файл
	set fso = CreateObject("Scripting.FileSystemObject")
	set f = fso.GetFile(filename)
	set ts = f.OpenAsTextStream(1)
	total = f.Size
	sz = 0

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_INIT_RECEIVE")

	call ProgressBefore
	do
		LOBBuff.Text = ts.Read(cLOBBlockSize)
		ls = len(LOBBuff.Text)
		sz = sz + ls
		call Runtime.ServerValidate(Nothing, "__LU_CLOB_RECEIVE_BLOCK")

		call Progress(total - sz, total)
	loop while not ts.AtEndOfStream
	call ProgressAfter

	call Runtime.ServerValidate(Nothing, "__LU_CLOB_CLOSE_RECEIVE")

	ts.Close
	set ts = Nothing
	set f = Nothing
	set fso = Nothing
end sub

'function EncodeHex(text)
'	l = len(text)
'	wl = l \ 2
'	res = ""
'	for i = 0 to wl - 1
'		word = _
'			asc(mid(text, i * 2 + 1, 1)) * 256 + _
'			asc(mid(text, i * 2 + 2, 1))
'		res = res & right("000" & hex(word), 4)
'	next
'	if l mod 2 > 0 then
'		res = res & right("0" & hex(asc(right(text, 1))), 2)
'	end if
'	EncodeHex = res
'end function
'function DecodeHex(hexstr)
'	l = len(hexstr) \ 2
'	res = ""
'	for i = 0 to l - 1
'		res = res & chr(ascb(Unescape("%" & mid(hexstr, i * 2 + 1, 2))))
'	next
'	DecodeHex = res
'end function

function StrConv(Text, SourceCharset, DestCharset)
	set Stream = CreateObject("ADODB.Stream")
	Stream.Type = 2
	Stream.Mode = 3
	Stream.Open
	Stream.Charset = DestCharset
	Stream.WriteText Text
	Stream.Position = 0
	Stream.Charset = SourceCharset
	StrConv = Stream.ReadText
	set Stream = Nothing
end function

function GetTextStream(text)
	set objStream = CreateObject("ADODB.Stream")
	objStream.Type = 2
	objStream.Mode = 3
	objStream.Open
	objStream.Charset = "windows-1251"
	objStream.WriteText text
	objStream.Position = 0
	objStream.Type = 1
	set GetTextStream = objStream
end function

function EncodeTxt(text, fmt)
	if text = "" then
		EncodeTxt = ""
		exit function
	end if
	set objStream = GetTextStream(text)
	set objXML = CreateObject("MSXml2.DOMDocument")
	objXML.loadXML "<data/>"
	set objDocElem = objXML.documentElement
	objDocElem.dataType = "bin." & fmt
	objDocElem.nodeTypedValue = objStream.Read
	EncodeTxt = objDocElem.text
	set objDocElem = Nothing
	set objXML = Nothing
	set objStream = Nothing
end function
function DecodeTxt(bin, fmt)
	if bin = "" then
		DecodeTxt = ""
		exit function
	end if
	set objXML = CreateObject("MSXml2.DOMDocument")
	objXML.loadXML "<data/>"
	set objDocElem = objXML.documentElement
	objDocElem.dataType = "bin." & fmt
	objDocElem.text = bin
	set objStream = CreateObject("ADODB.Stream")
	objStream.Type = 2
	objStream.Mode = 3
	objStream.Open
	objStream.Charset = "unicode"
	objStream.WriteText CStr(objDocElem.nodeTypedValue)
	objStream.Position = 0
	objStream.Charset = "windows-1251"
	DecodeTxt = mid(objStream.ReadText, 3)
	set objDocElem = Nothing
	set objXML = Nothing
	set objStream = Nothing
end function

' Извлекает и возвращает из строки s подстроку до разделителя sep. Если разделитель не найден, то все строку
function SplitBy(byref s, sep)
	res = ""
	p = instr(s, sep)
	if p > 0 then ' разделитель найден
		res = mid(s, 1, p - 1)
		s = mid(s, p + len(sep))
	else ' разделитель не найден
		res = s
		s = ""
	end if
	SplitBy = res
end function

' Формирует список файлов по пути и маске файла. Список в виде строки, где имена файлов разделены переводом строки (CR LF)
function GetFileList(path, fileMask)
	list = ""
	mask = fileMask
	mask = replace(mask, "^", "\^")
	mask = replace(mask, "$", "\$")
	mask = replace(mask, ".", "\.")
	mask = replace(mask, "+", "\+")
	mask = replace(mask, "|", "\|")
	mask = replace(mask, "(", "\(")
	mask = replace(mask, ")", "\)")
	mask = replace(mask, "[", "\[")
	mask = replace(mask, "]", "\]")
	mask = replace(mask, "{", "\{")
	mask = replace(mask, "}", "\}")

	mask = replace(mask, "?", "[^""/\\\*\?<>\|:]?")
	mask = replace(mask, "*", "[^""/\\\*\?<>\|:]*")

	set re = CreateObject("VBScript.RegExp")
	re.IgnoreCase = true
	re.Pattern = "^" & mask & "$"
	
	set fso = CreateObject("Scripting.FileSystemObject")
	set fold = fso.GetFolder(path)
	for each f in fold.Files
		if re.Test(f.Name) then
			list = list & f.Path & vbCRLF
		end if
	next

	if right(list, 2) = vbCRLF then
		list = left(list, len(list) - 2)
	end if

	GetFileList = list
end function

' Возвращает общий размер файлов по списку
function GetFileListSize(fileList)
	fl = fileList
	sz = 0
	set fso = CreateObject("Scripting.FileSystemObject")
	do
		nextFile = SplitBy(fl, vbCRLF)
		if nextFile <> "" then
			sz = sz + fso.GetFile(nextFile).Size
		end if
	loop until fl = ""
	GetFileListSize = sz
end function

' Проверяет размер передаваемых данных
function CheckSize(sz)
	CheckSize = true
	lim = Runtime.ApplicationEnvironment.SysContext("IBS_USER", "LOB_UTILS.SIZE_LIM")
	if lim <> "" then
		lim = CLng(lim)
		CheckSize = (sz <= lim)
	end if
end function

' Проверяет размер передаваемого файла
function CheckFileSize(fileName)
	CheckFileSize = CheckFileListSize(fileName)
end function

' Проверяет размер передаваемой папки
function CheckFolderSize(folderPath)
	CheckFolderSize = CheckFileListSize(GetFileList(folderPath, "*.*"))
end function

' Проверяет размер передаваемого списка файлов
function CheckFileListSize(fileList)
	sz = GetFileListSize(fileList)
	CheckFileListSize = CheckSize(sz)
end function
