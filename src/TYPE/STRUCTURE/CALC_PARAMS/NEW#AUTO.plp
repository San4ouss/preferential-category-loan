class CALC_PARAMS;

/**
@comment
Операция   "Добавить"
Стандартная операция регистрации в системе нового экземпляра справочника. 
Выполняемые функции:
Пользователю предлагается экранная форма, содержащая поля для ввода значений  реквизитов экземпляра.  
Экранная форма операции.
Для ввода предлагаются следующие пункты:
·	Наименование  - текстовое наименование вычисляемого параметра
·	Код ? идентификатор экземпляра в справочнике
·	Группа - код, используемый для группировки экземпляров справочника в критериях и фильтрах. 
·	Имя метода для вычисления параметра
·	Класс, содержащий метод определения вычисляемого параметра.
·	Тип результата ? тип возвращаемого значения
Элементы управления
·	OK -  "кнопка" успешного завершения сеанса ввода данных
·	Отмена ? завершение выполнения операции с отменой введенных изменений


*/
@name('Добавить')
constructor NEW#AUTO uses EDIT#AUTO is
public g_compile boolean;

NEW#AUTO (
	@name('Наименование')
	P#NAME in [NAME],
	@name('Код')
	P#CODE in [STRING_50],
	@name('Группа')
	P#GROUP in [STRING_16],
	@name('Имя метода для вычисления')
	P#METHOD in [STRING_16],
	@name('Класс, содержащий метод')
	P#CLASS in [STRING_16],
	@name('Тип результата')
	P#TYPE_RESULT in [STRING_1],
	@name('Описание')
	P_NOTE in [MEMO]
) return ref [CALC_PARAMS] is

validate is
begin
	if p_message = 'DEFAULT' then
		g_compile := true;
	elsif p_message = 'VALIDATE' then
		if p_info = 'CANCEL' then
			g_compile := false;
		end if;
	end if;
end;

execute is
begin
for cp IN [CALC_PARAMS] WHERE cp.[CODE] = P#CODE loop
  pragma error( 'Уже есть вычисляемый параметр с кодом: '||P#CODE);
end loop;
-- Установка значения реквизита "Наименование"
[NAME] := P#NAME;
-- Установка значения реквизита "Код"
[CODE] := P#CODE;
-- Установка значения реквизита "Группа"
[GROUP] := P#GROUP;
-- Установка значения реквизита "Имя метода для вычисления"
[METHOD] := P#METHOD;
-- Установка значения реквизита "Класс, содержащий метод"
[CLASS] := P#CLASS;
-- Установка значения реквизита "Тип результата"
[TYPE_RESULT] := P#TYPE_RESULT;
[NOTE] := P_NOTE;

pragma set_this;

if P#CLASS is not null and P#METHOD is not null then
	if g_compile then
		[ALIB].make_lib_4_method(P#CLASS,
								P#METHOD,
								true, -- не создавать, если уже существует
								true -- компилировать EXEC_CALC_PAR, если будет создана новая библиотека
								);
	else
		-- при вызове конструктора из кода, а не напрямую из Навигатора не создаем библиотеку перевызова,
		-- т.к. DDL коммитит изменения
		begin
			::[CALC_PARAMS]%locate(x where x <> this and x.[CLASS]=P#CLASS and x.[METHOD]=P#METHOD );
		exception
			when NO_DATA_FOUND then -- выдаем сообщение, если такой метод вычисления еще не использовался в справочнике
			    stdio.put_line_buf('ПОСЛЕ СОЗДАНИЯ НОВОЙ ЗАПИСИ' || LF$ ||
			      'В СПРАВОЧНИКЕ "ВЫЧИСЛЯЕМЫЕ ПАРАМЕТРЫ"' || LF$ ||
			      'НЕОБХОДИМО ВЫПОЛНИТЬ ОПЕРАЦИЮ' || LF$ ||
			      '"Сгенерировать или обновить библиотеки CP_xxxxxx (служебная)"! ' || LF$ ||
			      'Операция вызывается из этого же справочника!');
		end;
	end if;
end if;

g_compile := false;
end;
end;
end;
